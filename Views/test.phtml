<?php
require_once('Views/Template/header.phtml');

$topic = "Networking"; // Assign the topic
$db = new PDO('sqlite:QuestionAnswer.sqlite');
// Fetch all questions for the topic
$stmt = $db->prepare('SELECT * FROM questions WHERE topic = :topic ORDER BY id');
$stmt->bindParam(':topic', $topic, PDO::PARAM_STR);
$stmt->execute();
$questions = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Convert questions to JSON for JavaScript use
$questionsJSON = json_encode($questions);
?>

    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Test Progress Indicator -->
                <div class="progress mb-4" style="height: 10px;">
                    <div class="progress-bar bg-primary" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                </div>

                <!-- Test Card -->
                <div class="card shadow-lg border-0">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">
                            <i class="bi bi-journal-text me-2"></i>Practice Test
                        </h3>
                        <div class="d-flex align-items-center">
                        <span id="timer" class="badge bg-light text-primary px-3 py-2">
                            <i class="bi bi-clock me-2"></i>60:00
                        </span>
                        </div>
                    </div>

                    <div class="card-body p-5">
                        <!-- Question Section -->
                        <div class="mb-4">
                            <h4 id="question-text" class="text-center mb-4">
                            </h4>
                        </div>

                        <!-- Answer Input -->
                        <form id="test-form">
                            <div class="mb-4">
                            <textarea
                                    id="user-answer"
                                    class="form-control"
                                    rows="4"
                                    placeholder="Type your answer here..."
                                    required
                            ></textarea>
                                <div class="form-text text-muted mt-2">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Your answer will be evaluated for accuracy and comprehensiveness.
                                </div>
                            </div>

                            <!-- Navigation and Submit Buttons -->
                            <div class="d-flex justify-content-between align-items-center">
                                <button
                                        type="button"
                                        id="prev-question"
                                        class="btn btn-outline-secondary"
                                >
                                    <i class="bi bi-arrow-left me-2"></i>Previous
                                </button>

                                <div class="d-flex gap-3">
                                    <button
                                            type="button"
                                            id="next-question"
                                            class="btn btn-primary"
                                    >
                                        Next<i class="bi bi-arrow-right ms-2"></i>
                                    </button>

                                    <div class="text-center mb-2">
                                        <span id="question-counter" class="badge bg-secondary"></span>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Toast for notifications -->
                <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                    <div id="notification-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <strong class="me-auto">Notification</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body" id="toast-message">
                            Answer saved successfully.
                        </div>
                    </div>
                </div>

                <!-- Confirmation Modal -->
                <div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title" id="confirmSubmitModalLabel">Confirm Submission</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to submit your test? This action cannot be undone.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" id="confirm-submit">Submit Test</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<?php require_once('Views/Template/footer.phtml'); ?>

    <style>
        body {
            background-color: #f4f6f9;
        }
        .card {
            border-radius: 15px;
            overflow: hidden;
        }
        .card-header {
            background-image: linear-gradient(to right, #4e73df, #224abe);
        }
        #submit-test {
            transition: all 0.3s ease;
        }

        #submit-test:hover {
            transform: scale(1.05);
        }
    </style>

    <script>
        const questions = <?php echo $questionsJSON; ?>;
        let currentQuestionIndex = 0;

        document.addEventListener('DOMContentLoaded', function() {
            const questionText = document.getElementById('question-text');
            questionText.textContent = questions[0].question;
            currentQuestionIndex++;
        });

        // Cookie management functions
        function setCookie(name, value, days) {
            const expires = new Date();
            expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
            document.cookie = `${name}=${JSON.stringify(value)};expires=${expires.toUTCString()};path=/`;
        }

        function getCookie(name) {
            const nameEQ = `${name}=`;
            const ca = document.cookie.split(';');
            for(let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) {
                    try {
                        return JSON.parse(c.substring(nameEQ.length, c.length));
                    } catch (e) {
                        return null;
                    }
                }
            }
            return null;
        }

        // Quiz state management
        const quizAnswers = getCookie('quizAnswers') || {};

        function saveAnswer() {
            const userAnswer = document.getElementById('user-answer').value;
            const currentQuestion = questions[currentQuestionIndex].question;
            quizAnswers[currentQuestionIndex] = {
                question: currentQuestion,
                answer: userAnswer
            };
            setCookie('quizAnswers', quizAnswers, 7); // Store for 7 days
        }

        function updateQuestionCounter() {
            const counter = document.getElementById('question-counter');
            counter.textContent = `Question ${currentQuestionIndex + 1} of ${questions.length}`;
        }

        // Load previous answer when navigating
        function loadPreviousAnswer() {
            const savedData = quizAnswers[currentQuestionIndex];
            if (savedData) {
                document.getElementById('user-answer').value = savedData.answer;
            } else {
                document.getElementById('user-answer').value = '';
            }
        }

        // Change this DOMContentLoaded section
        document.addEventListener('DOMContentLoaded', function() {
            const questionText = document.getElementById('question-text');
            questionText.textContent = questions[0].question;
            viewedQuestions.add(0);
            loadPreviousAnswer();
            updateSubmitButtonVisibility();
            updateProgressBar();
            updateQuestionCounter();
        });

        // Add tracking for viewed questions
        const viewedQuestions = new Set();

        // Function to check if all questions have been viewed
        function hasViewedAllQuestions() {
            return viewedQuestions.size === questions.length-1;
        }

        // Function to show/hide submit button
        function updateSubmitButtonVisibility() {
            let submitButton = document.getElementById('submit-test');
            if (!submitButton) {
                // Create submit button if it doesn't exist
                submitButton = document.createElement('button');
                submitButton.id = 'submit-test';
                submitButton.className = 'btn btn-danger ms-3';
                submitButton.innerHTML = '<i class="bi bi-check-circle me-2"></i>Submit Test';
                submitButton.style.display = 'none';

                // Add click handler for submit button
                submitButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    // Show modal instead of alert
                    const submitModal = new bootstrap.Modal(document.getElementById('confirmSubmitModal'));
                    submitModal.show();
                });

                // Add button to navigation section
                document.querySelector('.d-flex.gap-3').appendChild(submitButton);
            }

            // Show/hide button based on whether all questions have been viewed
            submitButton.style.display = hasViewedAllQuestions() ? 'block' : 'none';
        }

        // Modal confirm button handler
        document.getElementById('confirm-submit').addEventListener('click', function() {
            submitTest();
            bootstrap.Modal.getInstance(document.getElementById('confirmSubmitModal')).hide();
        });

        function submitTest() {
            // Save the current answer before submitting
            saveAnswer();

            // Create a form element
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = 'results.php';

            // Create a hidden input for the answers
            const answersInput = document.createElement('input');
            answersInput.type = 'hidden';
            answersInput.name = 'quiz_answers';
            answersInput.value = JSON.stringify(quizAnswers);

            // Add the input to the form
            form.appendChild(answersInput);

            // Add the form to the document and submit it
            document.body.appendChild(form);
            form.submit();
        }

        // Update progress bar based on viewed questions
        function updateProgressBar() {
            const progressBar = document.querySelector('.progress-bar');
            const progress = (viewedQuestions.size / (questions.length-1)) * 100;
            progressBar.style.width = `${progress}%`;
            progressBar.setAttribute('aria-valuenow', progress);
        }

        // Function to show toast notification
        function showToast(message) {
            const toastEl = document.getElementById('notification-toast');
            const toast = new bootstrap.Toast(toastEl);
            document.getElementById('toast-message').textContent = message;
            toast.show();
        }

        document.getElementById('next-question').addEventListener('click', () => {
            // Save answer automatically when clicking Next
            saveAnswer();

            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                const questionText = document.getElementById('question-text');
                questionText.textContent = questions[currentQuestionIndex].question;
                viewedQuestions.add(currentQuestionIndex);
                loadPreviousAnswer();
                updateSubmitButtonVisibility();
                updateProgressBar();
                updateQuestionCounter();
            }
        });

        document.getElementById('prev-question').addEventListener('click', () => {
            // Save answer automatically when clicking Previous
            saveAnswer();

            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                const questionText = document.getElementById('question-text');
                questionText.textContent = questions[currentQuestionIndex].question;
                viewedQuestions.add(currentQuestionIndex);
                loadPreviousAnswer();
                updateSubmitButtonVisibility();
                updateProgressBar();
                updateQuestionCounter();
            }
        });
    </script>
<?php require_once('Views/Template/footer.phtml'); ?>